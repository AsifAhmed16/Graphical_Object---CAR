#include <glut.h>

float _angle = 0.0;
float _angle1 = 87.0;


void Draw() {

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // just keep
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	


	//road
	glColor3f(0.7, 0.7, 0.7);
	glPushMatrix();
	

	
	glTranslatef(0.0,-2.0,-6.0);

	glPushMatrix();
	glRotatef(90, 0.0, 1.0, 0.0);
	

	glPushMatrix();
	
		glRotatef(_angle, 0.0, 0.0, 1.0);
		glPushMatrix();
		            
					glutSolidTorus(1.0, 3.0, 10, 25); // inner radius, outer radius, sides, segments
		
		glPopMatrix();
		glPopMatrix();
		glPopMatrix();
	glPopMatrix();



	//wheel 1
	glColor3f(0.1, 0.2, 0.7);
	
	glPushMatrix();
	

	
	glTranslatef(0.2,-0.1,-2.0);

	glPushMatrix();
	glRotatef(90, 1.0, 0.0, 1.0);
	

	glPushMatrix();
	
		glRotatef(_angle1, 1.0, 0.0, 1.0);
		glPushMatrix();
		            
					glutSolidTorus(0.03, 0.1, 15, 35); // inner radius, outer radius, sides, segments
		
		glPopMatrix();
		glPopMatrix();
		glPopMatrix();
	glPopMatrix();


	//wheel 2
	glColor3f(0.1, 0.2, 0.7);
	
	glPushMatrix();
	

	
	glTranslatef(-0.2,-0.1,-2.0);

	glPushMatrix();
	glRotatef(90, 1.0, 0.0, 1.0);
	

	glPushMatrix();
	
		glRotatef(_angle1, 1.0, 0.0, 1.0);
		glPushMatrix();
		            
					glutSolidTorus(0.03, 0.1, 15, 35); // inner radius, outer radius, sides, segments
		
		glPopMatrix();
		glPopMatrix();
		glPopMatrix();
	glPopMatrix();

	//wheel 3
	glColor3f(0.1, 0.2, 0.7);
	
	glPushMatrix();
	

	
	glTranslatef(-0.15,0.35,-2.0);

	glPushMatrix();
	glRotatef(90, 1.0, 0.0, 1.0);
	

	glPushMatrix();
	
		glRotatef(_angle1, 1.0, 0.0, 1.0);
		glPushMatrix();
		            
					glutSolidTorus(0.03, 0.1, 15, 35); // inner radius, outer radius, sides, segments
		
		glPopMatrix();
		glPopMatrix();
		glPopMatrix();
	glPopMatrix();


	//wheel 4
	glColor3f(0.1, 0.2, 0.7);
	
	glPushMatrix();
	

	
	glTranslatef(0.15,0.35,-2.0);

	glPushMatrix();
	glRotatef(90, 1.0, 0.0, 1.0);
	

	glPushMatrix();
	
		glRotatef(_angle1, 1.0, 0.0, 1.0);
		glPushMatrix();
		            
					glutSolidTorus(0.03, 0.1, 15, 35); // inner radius, outer radius, sides, segments
		
		glPopMatrix();
		glPopMatrix();
		glPopMatrix();
	glPopMatrix();

	

	//car body
	glColor3f(0.1, 0.7, 0.1);
	glBegin(GL_QUADS);
	
	glVertex3f(0.2,-0.1,-1.7);
	glVertex3f(-0.2,-0.1,-1.7);
	glVertex3f(-0.15,0.35,-1.7);
	glVertex3f(0.15,0.35,-1.7);
	glEnd();


	glFlush();
	glutSwapBuffers(); // just keep
}


void update(int value)
{
	_angle += 1.0;
	if (_angle > 360)
	{
	_angle - 0.0;
	}

	_angle1 += 1.5;
	if (_angle1 > 93)
	{
	_angle1 = 87.0;
	}

	glutPostRedisplay();
	glutTimerFunc(1,update,0);
}

void lightSetting()
{
	
	GLfloat ambientIntensity[4] = {0.2, 0.2, 0.2, 1.0}; // 6. ambient property
	GLfloat diffuseIntensity[4] = {0.8, 0.8, 0.8, 1.0}; // 8. ambient property
	GLfloat position[4] = {1.0, 1.0, 1.0, 1.0}; // 10. position property

	glEnable(GL_DEPTH_TEST); // 4. just keep
	glEnable(GL_COLOR_MATERIAL); // 3. Materals' color

	glEnable(GL_LIGHTING); // 1. enable lighting
	glEnable(GL_LIGHT0); // 2. enable light 0
	glEnable(GL_NORMALIZE); 

	// set up light 0 properties
	glLightfv(GL_LIGHT0, GL_AMBIENT, ambientIntensity); // 7. ambient property adding to Light0
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseIntensity); // 9. ambient property adding to Light0
	glLightfv(GL_LIGHT0, GL_POSITION, position); // 11. position property adding to Light0
}

void Initialize() {
	glClearColor(0.1, 0.1, 0.1, 0.0);
	glMatrixMode(GL_PROJECTION);
	gluPerspective(45.0, 1.00, 1.0, 200.0);
}

int main(int iArgc, char** cppArgv) {
	glutInit(&iArgc, cppArgv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(450, 450);
	glutInitWindowPosition(200, 200);
	glutCreateWindow("cse 404");
	Initialize();
	lightSetting();
	glutDisplayFunc(Draw);
	update(0);
	glutMainLoop();
	return 0;
}